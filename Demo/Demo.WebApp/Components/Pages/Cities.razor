@page "/cities"
@using System.Net.Http.Json
@using Demo.WebApp.Models
@using System.Text.Json;
@inject HttpClient Http
@rendermode InteractiveServer
@attribute [StreamRendering]


<PageTitle>Cities Data</PageTitle>

<h3>Cities Population Data</h3>
<p style="color:red;">@errorText</p>

@if (cities == null)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    @* <p>Loading data...</p> *@
}
else if (!cities.Any())
{
    <div class="alert alert-warning" role="alert">
        No data available.
    </div>
}
else
{
    <input 
        type="text" 
        class="form-control mb-3" 
        placeholder="Search by city name..." 
        @oninput="(e) => FilterCitiesByName(e.Value?.ToString())" 
    />

    <input 
        type="text" 
        class="form-control mb-3" 
        placeholder="Search by country..."
           @oninput="(e) => FilterCitiesByCountry(e.Value?.ToString())"
    />

    <table style="width:100%; border-collapse:collapse; border:1px solid #ccc; font-family:Arial, sans-serif; font-size:14px;">
        <thead>
            <tr style="background-color:#f2f2f2; text-align:left;">
                <th style="padding:8px; border:1px solid #ccc;">Name</th>
                <th style="padding:8px; border:1px solid #ccc;">Country</th>
                <th style="padding:8px; border:1px solid #ccc;">Population</th>
                <th style="padding:8px; border:1px solid #ccc;"></th>
                <th style="padding:8px; border:1px solid #ccc;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var city in cities)
            {
                <tr>
                    <td style="padding:8px; border:1px solid #ccc;">@city.Name</td>
                    <td style="padding:8px; border:1px solid #ccc;">@city.Country</td>
                    <td style="padding:8px; border:1px solid #ccc;">@city.Population</td>
                    <td style="padding:8px; border:1px solid #ccc;">
                        <button @onclick="() => DeleteCity(city.Id)" class="btn btn-danger btn-sm">Delete</button>
                    </td
                    <td style="padding:8px; border:1px solid #ccc;">
                        <a class="btn btn-warning btn-sm" href="/cities/edit/@city.Id">Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="mt-3">
        <small class="text-muted">Total cities: @cities.Count()</small>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="SortByPopulation">
            Sort by Population @(isAscending ? "↑" : "↓")
        </button>
        <button class="btn btn-secondary ms-2" @onclick="LoadData">
            Refresh Data
        </button>
    </div>
}

@code {
    private List<City>? cities;
    private List<City>? allCities;
    private bool isAscending = false;
    private string errorText = "";

    public class CityData
    {
        public string Name { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public int Population { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        allCities = await Http.GetFromJsonAsync<List<City>>("/api/v1/city");
        cities = allCities?.ToList();
    }

    private async Task SortByPopulation()
    {
        if (cities != null && cities.Any())
        {
            var sortedList = isAscending
                ? cities.OrderByDescending(c => c.Population).ToList()
                : cities.OrderBy(c => c.Population).ToList();

            isAscending = !isAscending;
            cities = sortedList;
        }
    }

    private void FilterCitiesByName(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            cities = allCities?.ToList();
        }
        else if (allCities != null)
        {
            cities = allCities
                .Where(c => c.Name.Contains(name, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void FilterCitiesByCountry(string? country)
    {
        if (string.IsNullOrWhiteSpace(country))
        {
            cities = allCities?.ToList();
        }
        else if (allCities != null)
        {
            cities = allCities
                .Where(c => c.Country.Contains(country, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private async Task DeleteCity(int id)
    {
        Console.WriteLine("Deleting city with id: " + id);

        var res = await Http.DeleteAsync($"/api/v1/city/{id}");
        if (res.IsSuccessStatusCode)
        {
            Console.WriteLine($"City {id} Deleted");
        }
        else
        {
            var error = await res.Content.ReadAsStringAsync();
            if(!string.IsNullOrWhiteSpace(error))
            {
                var errorObject = JsonSerializer.Deserialize<ErrorResponseInfo>(error);
                errorText = $"Failed: {errorObject?.Message}";
                StateHasChanged();
            }
            Console.WriteLine($"Failed: {res.StatusCode} {error}");
        }

        await Task.Delay(5000);
        errorText = "";
        StateHasChanged();
        await LoadData();
    }
    public class ErrorResponseInfo
    {
        public int StatusCode { get; set; }
        public string Message { get; set; }
    }
}