@page "/addcity"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Demo.Application
@using Demo.Application.CQRS.Cities
@using Demo.Application.CQRS.Countries
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Add City</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="city" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">City Name</label>
        <InputText id="name" class="form-control" @bind-Value="city.Name" />
    </div>

    <div class="mb-3">
        <label for="population" class="form-label">Population</label>
        <InputNumber id="population" class="form-control" @bind-Value="city.Population" />
    </div>

    <div class="mb-3">
        <label for="country" class="form-label">Country</label>
        <InputSelect id="country" class="form-select" @bind-Value="city.CountryId">
            <option value="0">Select a country</option>
            @foreach (var country in countries)
            {
                <option value="@country.Id">@country.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary ms-2" @onclick='@(() => Navigation.NavigateTo("/cities"))'>Cancel</button>
</EditForm>

@code {
    private CreateCityDTO city;
    private CountryDTO[] countries = Array.Empty<CountryDTO>();
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        city = new CreateCityDTO();
        try
        {
            countries = await Http.GetFromJsonAsync<CountryDTO[]>("api/v1/country") ?? Array.Empty<CountryDTO>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;

        if (city != null)
        {
            var response = await Http.PostAsJsonAsync("api/v1/City", city);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "City added successfully!";
                await Task.Delay(2500);
                Navigation.NavigateTo("/cities");
            }
            else
            {
                errorMessage = $"Error adding city: {response.ReasonPhrase}";
            }
        }
    }
}