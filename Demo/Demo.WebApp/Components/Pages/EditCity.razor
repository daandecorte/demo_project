@page "/cities/edit/{Id:int}"
@rendermode InteractiveServer
@using System.Net.Http.Json
@using Demo.WebApp.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit City</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (city == null || countries.Length == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="city" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="name" class="form-label">City Name</label>
            <InputText id="name" class="form-control" @bind-Value="city.Name" readonly />
        </div>
        <div class="mb-3">
            <label for="population" class="form-label">Population</label>
            <InputNumber id="population" class="form-control" @bind-Value="city.Population" />
        </div>
        <div class="mb-3">
            <label for="country" class="form-label">Country</label>
            <InputSelect id="country" class="form-select" @bind-Value="city.CountryId">
                <option value="0">Select a country</option>
                @foreach (var country in countries)
                {
                    <option value="@country.Id">@country.Name</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick='@(() => Navigation.NavigateTo("/cities"))'>Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private UpdateCity? city;
    private Country[] countries = Array.Empty<Country>();
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        city = await Http.GetFromJsonAsync<UpdateCity>($"/api/v1/city/{Id}");

        // Get the paged result and extract only the data
        var pagedResult = await Http.GetFromJsonAsync<IEnumerable<Country>>("/api/v1/country");
        // countries = pagedResult?.Data?.ToArray() ?? Array.Empty<CountryDTO>();
        countries = pagedResult?.ToArray() ?? Array.Empty<Country>();
    }

    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;

        if (city != null)
        {
            var response = await Http.PutAsJsonAsync($"/api/v1/City/{Id}", city);
            if (response.IsSuccessStatusCode)
            {
                successMessage = "City updated successfully.";
                await Task.Delay(2500);
                Navigation.NavigateTo("/cities");
            }
            else
            {
                errorMessage = $"Error updating city: {response.ReasonPhrase}";
            }
        }
        else
        {
            errorMessage = "City data is missing.";
        }
    }
}
